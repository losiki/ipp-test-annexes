import java.util.zip.*

subprojects.each { subproject -> evaluationDependsOn( subproject.path ) }

task aggregate(type: Copy, dependsOn: subprojects.tasks['convert']) {
    subprojects.each { subproject ->
        from subproject.tasks['convert'].ext.capFile
        into 'build'
    }
	doLast {
		// applet1m:
		// - modify imported AID: A0000000620101->A0100000620101
		ZipFile file = new ZipFile('build/applet1.cap')
		ZipOutputStream modCap = new ZipOutputStream(new FileOutputStream('build/applet1m.cap'))
		file.entries().each { entry ->
			def bytes = file.getInputStream(entry).getBytes()
			modCap.putNextEntry(new ZipEntry(entry.name))
			if (entry.name.endsWith('Import.cap')) {
				for (int i = 0; i < bytes.length; i++) {
					if (bytes[i] == 0x07 && (bytes[i+1] & 0xFF) == 0xA0) {
						bytes[i+2] = 0x10
						break
					}
				}
			}
			modCap.write(bytes, 0, bytes.length)
			modCap.closeEntry()
		}
		modCap.close()
	}
}

task capToLoadFile(dependsOn : tasks['aggregate']) {
	doLast {
		def myTree = fileTree('build') {
			include '*.cap'
		}
		myTree.each { capFile ->
			def components = []
			ZipFile file = new ZipFile(capFile)
			file.entries().each { entry ->
				if (entry.name.endsWith('cap')) {
				def bytes = file.getInputStream(entry).getBytes()
					components[bytes[0]] = bytes;
				}
			} 
			def outFile = new File('build/' + capFile.name.replace('.cap', '.hex'))
			outFile.withWriter { writer ->
				for (idx in [1,2,4,3,6,7,8,10,5,9,11]) {
					if(components[idx] != null) {
						components[idx].encodeHex().writeTo(writer)
					}
				}
			}
		}
	}
}